'''
dftstream - Streamer for Fourier transformed spectra
'''

import numpy as np
import scipy.signal as signal
    
     
class DFTStream:
    '''
    DFTStream - Transform a frame stream to various forms of spectra
    '''


    def __init__(self, frame_stream, specfmt="dB"):
        '''
        DFTStream(frame_stream, specfmt)        
        Create a stream of discrete Fourier transform (DFT) frames using the
        specified sample frame stream. Only bins up to the Nyquist rate are
        returned in the stream Optional arguments:
        
        specfmt - DFT output:  
            "complex" - return complex DFT results
             "dB" [default] - return power spectrum 20log10(magnitude)
             "mag^2" - magnitude squared spectrum
        '''
        
        pass
         
    def shape(self):
        "shape() - Return dimensions of tensor yielded by next()"
        
        # Returns shape of one spectral vector 
        pass
    
    def size(self):
        "size() - number of elements in tensor generated by iterator"
        
        # Returns number of elements in one spectral vector
        pass
   
    def get_Hz(self):
        """get_Hz() - Return list of frequencies associated with each 
        spectral bin.  (List is of the same size as the # of spectral
        bins up to the Nyquist rate, or half the frame lenght)
        """
        
        pass
            
    def __iter__(self):
        "iter() Return iterator for stream"
        pass
    
    def __next__(self):
        "next() Return next DFT frame"        
        pass
        
    def __len__(self):
        "len() - Number of tensors in stream"
        return len(self.framer)

        
        
        
    
        